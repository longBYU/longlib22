C
C *** LAST REVISED ON  8-DEC-1993 07:03:25.89
C *** SOURCE FILE: [LONGLIB93.SOURCES.FORTRAN.MASTER]MLIB.FOR
C
	SUBROUTINE CNT3D(A,INX,INZ,NX,NZ,ALPHA,BETA,XH,YH,ZH,
     $		NLEVELS,ASTART,AEND,IDIR,IFLAG,IAXIS,
     $		XT,NXT,XASTART,XAEND,YT,NYT,ZT,NZT,ZASTART,ZAEND,
     $		AMININ,AMAXIN,ICOL,ILINE)
C
C	CREATED BY D. LONG  JULY, 1985	AT JPL
C	MODIFIED BY D. LONG   FEB, 1986 AT JPL + ADDED LINE TYPE ARRAY
C
C	SIMPLIFIES CALLING CNT3DX ROUTINE AXISES
C
	DIMENSION A(INX,INZ),ICOL(*),ILINE(*),ASTART(*),IC(4)
	CHARACTER*(*) XT,YT,ZT
	IAX=MOD(IAXIS,10)
	IF (IAXIS.LT.0) THEN
		AMN=AMININ
		AMX=AMAXIN
	ENDIF
	IF (MOD(IABS(IFLAG),10).EQ.1) THEN
		CALL CNT3DX(A,INX,INZ,NX,NZ,ALPHA,BETA,XH,YH,ZH,
     $			NLEVELS,ASTART,AEND,IDIR,IFLAG,IAX,
     $			XT,NXT,XASTART,XAEND,NMX,NNX,MLX,TSX,NDX,SMX,
     $			YT,NYT,NMY,NNY,MLY,TSY,NDY,SMY,
     $			ZT,NZT,ZASTART,ZAEND,NMZ,NNZ,MLZ,TSZ,NDZ,SMZ,
     $			AMN,AMX,ICOL,IC)
	ELSE IF (MOD(IABS(IFLAG),10).GT.1) THEN
		CALL CNT3DX(A,INX,INZ,NX,NZ,ALPHA,BETA,XH,YH,ZH,
     $			NLEVELS,ASTART,AEND,IDIR,IFLAG,IAX,
     $			XT,NXT,XASTART,XAEND,NMX,NNX,MLX,TSX,NDX,SMX,
     $			YT,NYT,NMY,NNY,MLY,TSY,NDY,SMY,
     $			ZT,NZT,ZASTART,ZAEND,NMZ,NNZ,MLZ,TSZ,NDZ,SMZ,
     $			AMN,AMX,ICOL,ILINE)
	ELSE
		CALL CNT3DX(A,INX,INZ,NX,NZ,ALPHA,BETA,XH,YH,ZH,
     $			NLEVELS,ASTART,AEND,IDIR,IFLAG,IAX,
     $			XT,NXT,XASTART,XAEND,NMX,NNX,MLX,TSX,NDX,SMX,
     $			YT,NYT,NMY,NNY,MLY,TSY,NDY,SMY,
     $			ZT,NZT,ZASTART,ZAEND,NMZ,NNZ,MLZ,TSZ,NDZ,SMZ,
     $			AMN,AMX,IC,IC)
	ENDIF
	RETURN
	END
C
C **************************************************************************
C
	SUBROUTINE CNT3DX(A,INX,INZ,NX,NZ,ALPHA,BETA,XH,YH,ZH,
     $		NLEVELS,ASTART,AEND,IDIR,IFLAG,IAXIS,
     $		XT,NXT,XASTART,XAEND,NMX,NNX,MLX,TSX,NDX,SMX,
     $		YT,NYT,NMY,NNY,MLY,TSY,NDY,SMY,
     $		ZT,NZT,ZASTART,ZAEND,NMZ,NNZ,MLZ,TSZ,NDZ,SMZ,
     $		AMININ,AMAXIN,ICOL,ILINE)
C
C	CREATED BY D. LONG     JULY, 1985	AT JPL
C	MODIFIED BY D. LONG   FEB, 1986 AT JPL + ADDED LINE TYPE ARRAY
C
C	ROUTINE TO PLOT DATA IN 3-D CONTOUR FORM SIMILAR TO VAX3DX
C	DOES NOT DO HIDDEN LINE REMOVAL
C
C	COORDINATE SYSTEM IS:		Y  Z
C				NAMES:	|/
C					 \X
C
C	A	(R) ARRAY A(INX,INZ) CONTAINING VERTICAL HEIGHT DATA
C	INX,INZ (I) DIMENSION OF A ARRAY
C	NX,NZ	(I) INDICATING SIZE OF A ARRAY TO PLOT
C	ALPHA	(R) ANGLE (IN DEGREES) OF X AXIS (NX) FROM HORIZONTAL
C	BETA	(R) ANGLE (IN DEGREES) OF Z AXIS (NZ) FROM HORIZONTAL
C	XH,YH,ZH(R) LENGTH OF EACH AXIS (INCHES)
C	NLEVELS REAL NUMBER OF UNIFORMLY SPACED CONTOUR LEVELS BETWEEN
C			 VALUES ASTART AND AEND.  Jth CONTOUR IS
C			 (J-1)*(AEND-ASTART)/(NL-1)+ASTART
C			IF NLEVELS < 0 THEN MIN(V) AND MAX(V) ARE USED
C			 AS ASTART AND AEND VALUES
C			IF NLEVELS = 0 THEN ASTART IS USED CONTOUR LIST 
C			 WITH INT(AEND) THE NUMBER OF CONTOURS
C	ASTART  REAL STARTING VALUE OF CONTOUR PLOT LEVELS (NLEVELS<>0)
C		     CONTOUR LIST (NLEVELS=0) DIMENSIONED ASTART(INT(AEND))
C	AEND    REAL ENDING VALUE OF CONTOUR PLOT LEVELS (NLEVELS<>0)
C		     NUMBER OF CONTOURS IN ASTART (NLEVELS=0)
C	IDIR	(I) CONTOUR EDGING FLAG
C			< 0 EXTEND CONTOUR SURFACE TO EDGES LESS THAN CONTOUR LEVEL
C			= 0 DO NOT EXTEND CONTOUR EDGES
C			> 0 EXTEND CONTOUR SURFACE TO EDGES GREATER THAN CONTOUR 
C	IFLAG	(I) PLOT FLAG
C		>10000	REPEAT PLOTTING BUT DO NOT INTIALIZE PLOTTER
C		< 0	REPEAT PLOTTING (DON'T CLOSE PLOTTER OUTPUT
C		= 0	CLOSE PLOTTER OUTPUT--DO NOT PRODUCE PLOT
C		> 0	SINGLE PLOT OUTPUT ONLY (PLOTTER OUTPUT CLOSED)
C 	(ONE'S DIGIT)	= 1 DO NOT USE PEN COLOR OR LINE TYPE ARRAY
C			= 2 USE PEN COLOR CONTROL ARRAY BUT NOT LINE TYPE
C 			= 3 DO NOT USE PEN COLOR BUT DO USE LINE TYPE
C 			= 4 USE PEN COLOR AND LINE TYPE ARRAYS
C 	(HUNDREDS'S)	= 0 ASK WHICH SCREEN DEVICE TO USE
C		   	<>0 SCREEN DEVICE CODE NUMBER
C 	IAXIS	(I) AXIS OPTION FLAG
C			= 0	DO NOT PLOT AXIS--FOLLOWING VARIABLES NOT ACCESSED
C			< 0	PLOT AXIS, USE INPUT Y AXIS SCALE--FOLLOWING VARIABLES ACCESSED
C			> 0	PLOT AXIS, USE COMPUTED Y AXIS SCALE--FOLLOWING VARIABLES ACCESSED
C 	(ONE'S DIGIT)	= 1	PLOT AXIS, Y AXIS SCALE--VARIABLES ACCESSED
C			= 2	PLOT AXIS, AUTO SCALE Y AXIS--VARIABLES ACCESSED
C	(TEN'S DIGIT)	= 0	DEFAULT AXIS PARAMETERS
C			= 1	SPECIALIZED AXIS2 PARAMETERS
C 	XT,YT,ZT	(B) STRINGS FOR AXIS TITLES
C 	NXT,NYT,NZT	(I)  LENGTH OF AXIS TITLES
C			     IF ZERO THEN THAT AXIS NOT PLOTTED
C 	XASTART,ZASTART	(R) AXIS START VALUES
C 	XAEND,ZAEND	(R) AXIS END VALUES
C ACCESSED ONLY IF TEN'S DIGIT OF IFLAG=1
C	NMX,NMY,NMZ	(I) NUMBER OF MINOR TICKS BETWEEN MAJOR TICKS
C	NNX,NNY,NNZ	(I) HIGHLIGHT LENGTH OF NNX-TH MINOR TICK ON AXIS
C	MLX,MLY,MLZ	(I) NUMBER OF MAJOR TICK MARKS ON AXIS
C	TSX,TSY,TSZ	(R) SIZE OF TITLE AND NUMBERS OF AXIS
C			  IF LESS THAN ZERO DO NOT AUTO-SCALE BY (x10^POWER)
C 	NDX,NDY,NDZ	(R) NUMBER OF DIGITS TO RIGHT OF DECIMAL POINT
C 	SMX,SMY,SMZ	(R) MAJOR TICK LENGTH
C 	AMININ,AMAXIN 	(R) YAXIS SCALING FACTORS (ONLY NEEDED IF IAXIS < 0)
C	ICOL		(I) COLOR INDEX TABLE (ACCESSED IF MOD(IFLAG,10)>1)
C				ICOL(1) AXIS LINE COLOR
C				ICOL(2) AXIS NUMBERS COLOR
C				ICOL(3) AXIS TITLE COLOR
C				ICOL(4) AXIS EXPONENT COLOR
C				ICOL(5) CONTOUR LINE 1
C				ICOL(6) CONTOUR LINE 2
C				ICOL(7)   . . .      3
C				 ...      ...       ...
C	ILINE		(I) LINE TYPE ARRAY FOR CONTOURS
C				(ONLY ACCESSED IF MOD(IABS(IFLAG),10)>2)
C
	DIMENSION A(INX,INZ),PAS(2),ICOL(*),IC(4),ILINE(*),ASTART(*)
	LOGICAL REPEAT
	CHARACTER*(*) XT,YT,ZT
	COMMON /LOCATE/ XSCALE,YSCALE,ZSCALE,AMIN,ALPH,BET
	SAVE /LOCATE/,REPEAT
	DATA TPI/3.141592654/,REPEAT/.FALSE./
C
	IF (IFLAG.EQ.0) THEN
		IF (REPEAT) CALL PLOTND	!CLOSE PLOTTER
		REPEAT=.FALSE.
		RETURN
	ENDIF
	ALPH=ALPHA*TPI/180.		!X-AXIS INCLINATION 0-80 DEGS
	BET=BETA*TPI/180.		!Z-AXIS ANGLE 5-80 DEGS
C
	IF (IAXIS.LT.0) THEN
		AMAX=AMAXIN
		AMIN=AMININ
	ELSE
		AMAX=A(1,1)
		AMIN=A(1,1)
		DO 16 IZ=1,NZ			!DETERMINE MAX,MIN ARRAY VALUES
			DO 16 IX=1,NX
				AMAX=AMAX1(AMAX,A(IX,IZ))
				AMIN=AMIN1(AMIN,A(IX,IZ))
16		CONTINUE
	ENDIF
	IF (ALPHA.LT.0..OR.ALPHA.GT.88..OR.BETA.LT.1..OR.BETA.GT.90.) THEN
		WRITE(*,3000)
3000		FORMAT(' *** CNT3DX INPUT ANGLE ERROR ***')
		RETURN
	ENDIF
	IF (AMAX.EQ.AMIN) THEN
		WRITE(*,3001)
3001		FORMAT(' *** CNT3DX ERROR *** MAX=MIN')
		AMAX=AMIN+1.
	ENDIF
C
	XLEN=ABS(XH)
	XSCALE=XLEN/FLOAT(NX-1)
	ZLEN=ABS(ZH)
	ZSCALE=ZLEN/FLOAT(NZ-1)
	YLEN=ABS(YH)
	IF (MOD(IABS(IAXIS),10).EQ.2) THEN
		PAS(1)=AMAX
		PAS(2)=AMIN
		CALL SCALE(PAS,YLEN,2,1,1,AMIN,DAA)
		AMAX=YLEN*DAA+AMIN
	ENDIF
	YSCALE=1.0
	IF (AMAX-AMIN.NE.0.0) YSCALE=YLEN/(AMAX-AMIN)
C
C	INTIALIZE PLOT PACKAGE
C
	JF=IABS(IFLAG)
	IF (.NOT.REPEAT.AND.JF.LT.10000) THEN
		ILU=-JF/10
		CALL FRAME(3,ILU,1.5,0.65,1.)		!INTIALIZE
	ELSE
		CALL CTERM(-1)				!PUT TERMINAL PLOT MODE
	ENDIF
C
	IAF=IABS(IAXIS)/10
	JF=MOD(JF,10)
	IF (IAXIS.NE.0) THEN		!PLOT AXIS LABELS
		NADD=0
		IF (JF.EQ.2.OR.JF.EQ.4) THEN
			IC(1)=ICOL(2)
			IC(2)=ICOL(3)
			IC(3)=ICOL(4)
			IC(4)=ICOL(5)
			NADD=100000	! PEN COLOR
		ENDIF
		CALL VXPT3D(XP,YP,AMIN,1,1,NX)
		DY=(AMAX-AMIN)/YLEN
		IF (NYT.GT.0) THEN 	!PLOT Y AXIS
			IF (IAF.EQ.1) THEN
				CALL AXIS2(XP,YP,YT,NYT+11000+NADD,
     $				YLEN,90.,AMIN,DY,NMY,NNY,-IABS(MLY),
     $				TSY,NDY,SMY,IC)
			ELSE
				CALL AXIS(XP,YP,YT,NYT+1000+NADD,
     $					YLEN,90.,AMIN,DY,N1,N2,IC)
			ENDIF
		ENDIF
		CALL VXPT3D(XP1,YP1,AMIN,NX,1,NX)
		DX=(XAEND-XASTART)/XLEN
		ANG=ATAN2(YP1-YP,XP1-XP)*180./TPI
		IF (NXT.GT.0) THEN
			IF (IAF.EQ.1) THEN
				CALL AXIS2(XP,YP,XT,-NXT-NADD-10000,XLEN,ANG,
     $				XASTART,DX,NMX,NNX,-IABS(MLX),TSX,NDX,SMX,IC)
			ELSE
				CALL AXIS(XP,YP,XT,-NXT-NADD,XLEN,ANG,
     $					XASTART,DX,N1,N2,IC)
			ENDIF
		ENDIF
		DZ=(ZAEND-ZASTART)/ZLEN
		IF (NZT.GT.0) THEN
			IF (IAF.EQ.1) THEN
				CALL AXIS2(XP1,YP1,ZT,-NZT-NADD-10000
     $				,ZLEN,BETA,ZASTART,DZ,NMZ,NNZ,
     $				-IABS(MLZ),TSZ,NDZ,SMZ,IC)
			ELSE
				CALL AXIS(XP1,YP1,ZT,-NZT-NADD,
     $				ZLEN,BETA,ZASTART,DZ,N1,N2,IC)
			ENDIF
		ENDIF
	ENDIF
C
C	BEGIN CONTOUR PLOTTING
C
	XXX=NX
	AE=AEND
	AS=ASTART(1)
	NL=IABS(NLEVELS)
	IF (NL.EQ.0) NL=IFIX(ABS(AEND)+0.5)
	IF (NLEVELS.LE.0) THEN
		AE=AMAX
		AS=AMIN
	ENDIF
	DA=0.
	IF (NL.GT.1) DA=(AE-AS)/(NL-1)
C
C	BEGIN CONTOURING
C
	DO 100 IL=1,NL			! FOR EACH LEVEL
	   IF (JF.EQ.2.OR.JF.EQ.4) CALL PLOT(FLOAT(ICOL(6+IL)),0.,0)!COLOR
		IF (JF.GT.2) CALL NEWPEN(ILINE(IL))	! LINE TYPE
		TV=AS+FLOAT(IL-1)*DA	! Z VALUE FOR CONTOUR LEVEL
		IF (NLEVELS.EQ.0) TV=ASTART(IL)
		DO 60 IY=1,IABS(NZ)-1	! FOR EACH Z CELL
			Y1=IY-1
			Y2=IY
			IYY=IY
			IF (IY.GT.1) IYY=IYY-1
			IY2=IY+1
			IF (IY2.LT.NZ) IY2=IY2+1
			DO 50 IX=1,IABS(NX)-1	! FOR EACH X CELL
				X1=IX-1
				X2=IX
				IXX=IX
				IF (IX.GT.1) IXX=IXX-1
				IX2=IX+1
				IF (IX2.LT.NX) IX2=IX2+1
			CALL CNCELPLT3D(TV,XXX,X1,Y1,X2,Y2,TV,A(IX,IY),
     $				A(IX,IY+1),A(IX+1,IY+1),A(IX+1,IY),
     $				A(IXX,IYY),A(IXX,IY2),A(IX2,IY2),A(IX2,IYY))
 50			CONTINUE
C
			IF (IDIR.EQ.0) GOTO 60
C
C	ADD Y CELL EDGES
C
			IX=1
			X1=IX-1
			CALL TRCELPLT3D(IDIR,X1,Y1,X1,Y2,A(IX,IY),
     $				A(IX,IY+1),TV,XXX)
			IX=IABS(NX)
			X1=IX-1
			CALL TRCELPLT3D(IDIR,X1,Y1,X1,Y2,A(IX,IY),
     $				A(IX,IY+1),TV,XXX)
 60		CONTINUE
C
C	NOW ADD X EDGES, EACH SIDE SEPARATELY TO MINIMIZE PEN MOVEMENTS
C
		IF (IDIR.EQ.0) GOTO 100
C
		IY=1
		Y1=IY-1
		DO 70 IX=1,IABS(NX)-1	! FOR EACH X EDGE
			X1=IX-1
			X2=IX
			CALL TRCELPLT3D(IDIR,X1,Y1,X2,Y1,A(IX,IY),
     $				A(IX+1,IY),TV,XXX)
70		CONTINUE
C
		IY=IABS(NZ)
		Y1=IY-1
		DO 80 IX=1,IABS(NX)-1	! FOR EACH X EDGE
			X1=IX-1
			X2=IX
			CALL TRCELPLT3D(IDIR,X1,Y1,X2,Y1,A(IX,IY),
     $				A(IX+1,IY),TV,XXX)
 80		CONTINUE
100	CONTINUE
C
C	FINISH PLOTTING ROUTINE
C
	IF (JF.GT.2) CALL NEWPEN(1)		!RESTORE LINE TYPE
	CALL PLOT(0.,0.,3)			!PEN UP
	IF (IFLAG.GT.0) THEN
		CALL CTERM(2)			!CLEAR TERMINAL
		CALL PLOTND			!CLOSE PLOT OUTPUT
		REPEAT=.FALSE.
	ENDIF
	IF (IFLAG.LT.0) THEN
		REPEAT=.TRUE.
		CALL CTERM(1)			!PUT TERMINAL IN TEXT MODE
	ENDIF
	RETURN
	END
C
C
	SUBROUTINE RVXPT3D(X,Y,AVAL,XR,ZR,XM)
C
C	CREATED BY DAVID LONG    JULY, 1985	AT JPL
C	SUBPROGRAM OF CNT3DX
C
C	ROUTINE TO DETERMINE X,Y VALUE OF A POINT ON 3-D SURFACE
C	FOR CNT3DCX
C
	COMMON /LOCATE/ XSCALE,YSCALE,ZSCALE,AMIN,ALPH,BET
	SAVE /LOCATE/
	X=XSCALE*XR*COS(ALPH)+ZR*COS(BET)*ZSCALE
	Y=YSCALE*(AVAL-AMIN)+(XM-XR)*SIN(ALPH)*XSCALE+
     $		ZR*SIN(BET)*ZSCALE
	RETURN
	END
C
C
	SUBROUTINE CNCELPLT3D(ZP,XMAX,X1,Y1,X2,Y2,TV,V1,V2,V3,V4,V5,V6,V7,
     $		V8)
C
C	CREATED BY D. LONG     JULY, 1985	AT JPL
C	SUBPROGRAM OF CNT3DX
C	COMPUTES AND PLOTS CELL SQUARE-SECTIONED CONTOURS IN 3D
C
C	INTERSECTION CODE MAP:
C			  (2)
C			2.   3.
C		    (1)	       (4)
C			1.   4.
C			  (8)
C
	INTEGER SEGCODE
C
	IF=SEGCODE(Y1,Y2,V1,V2,TV,YI1)
	IF=IF+2*SEGCODE(X1,X2,V2,V3,TV,XI2)
	IF=IF+4*SEGCODE(Y2,Y1,V3,V4,TV,YI3)
	IF=IF+8*SEGCODE(X2,X1,V4,V1,TV,XI4)
C
	GOTO (50,50,50,103,50,105,106,107,50,109,110,
     $		111,112,113,114,115) IF+1
	GOTO 50
103	CONTINUE
	CALL RVXPT3D(PX,PY,ZP,X1,YI1,XMAX)
	CALL PLOT(PX,PY,3)
	CALL RVXPT3D(PX,PY,ZP,XI2,Y2,XMAX)
	CALL PLOT(PX,PY,2)
	GOTO 50
105	CONTINUE
	CALL RVXPT3D(PX,PY,ZP,X1,YI1,XMAX)
	CALL PLOT(PX,PY,3)
	CALL RVXPT3D(PX,PY,ZP,X2,YI3,XMAX)
	CALL PLOT(PX,PY,2)
	GOTO 50
106	CONTINUE
	CALL RVXPT3D(PX,PY,ZP,XI2,Y2,XMAX)
	CALL PLOT(PX,PY,3)
	CALL RVXPT3D(PX,PY,ZP,X2,YI3,XMAX)
	CALL PLOT(PX,PY,2)
	GOTO 50
107	CONTINUE
	IF (V3.EQ.TV) GOTO 103
	GOTO 106
109	CONTINUE
	CALL RVXPT3D(PX,PY,ZP,X1,YI1,XMAX)
	CALL PLOT(PX,PY,3)
	CALL RVXPT3D(PX,PY,ZP,XI4,Y1,XMAX)
	CALL PLOT(PX,PY,2)
	GOTO 50
110	CONTINUE
	CALL RVXPT3D(PX,PY,ZP,XI4,Y1,XMAX)
	CALL PLOT(PX,PY,3)
	CALL RVXPT3D(PX,PY,ZP,XI2,Y2,XMAX)
	CALL PLOT(PX,PY,2)
	GOTO 50
111	CONTINUE
	IF (V1.EQ.TV) GOTO 103
	GOTO 109
112	CONTINUE
	CALL RVXPT3D(PX,PY,ZP,XI4,Y1,XMAX)
	CALL PLOT(PX,PY,3)
	CALL RVXPT3D(PX,PY,ZP,X2,YI3,XMAX)
	CALL PLOT(PX,PY,2)
	GOTO 50
113	CONTINUE
	IF (V1.EQ.TV) GOTO 112
	GOTO 109
114	CONTINUE
	IF (V3.EQ.TV) GOTO 112
	GOTO 106
115	CONTINUE
	IF (V1.EQ.TV) GOTO 50
	C1=POLY1INT(V5,V1,V3,V7,1.5)
	C2=POLY1INT(V6,V2,V4,V8,1.5)
	C=(C1+C2)/2.
	IF (C.GT.TV) THEN
		IF (V1.GT.TV) THEN
			CALL RVXPT3D(PX,PY,ZP,X1,YI1,XMAX)
			CALL PLOT(PX,PY,3)
			CALL RVXPT3D(PX,PY,ZP,XI2,Y2,XMAX)
			CALL PLOT(PX,PY,2)
			GOTO 112
		ELSE
			CALL RVXPT3D(PX,PY,ZP,X1,YI1,XMAX)
			CALL PLOT(PX,PY,3)
			CALL RVXPT3D(PX,PY,ZP,XI4,Y1,XMAX)
			CALL PLOT(PX,PY,2)
			GOTO 106
		ENDIF
	ELSE
		IF (V1.LT.TV) THEN
			CALL RVXPT3D(PX,PY,ZP,X1,YI1,XMAX)
			CALL PLOT(PX,PY,3)
			CALL RVXPT3D(PX,PY,ZP,XI2,Y2,XMAX)
			CALL PLOT(PX,PY,2)
			GOTO 112
		ELSE
			CALL RVXPT3D(PX,PY,ZP,X1,YI1,XMAX)
			CALL PLOT(PX,PY,3)
			CALL RVXPT3D(PX,PY,ZP,XI4,Y1,XMAX)
			CALL PLOT(PX,PY,2)
			GOTO 106
		ENDIF
	ENDIF
 50	RETURN
	END
C
C
	SUBROUTINE TRCELPLT3D(IDIR,X1,Y1,X2,Y2,V1,V2,TV,XMAX)
C
C	CREATED BY D. LONG     JULY, 1985	AT JPL
C	SUBPROGRAM OF CNT3DX
C	COMPUTES AND PLOTS WHERE A LINE SEGMENT CROSSES A THRESHOLD
C	VALUE.
C
C	IDIR		(I)	DIRECTION:  < 0 LESS, > 0 GREATER
C	X1,Y1,X2,Y2	(R)	START, END POINTS OF LINE SEGMENT
C	V1,V2		(R)	VALUE OF FUNCTION AT START, END OF LINE
C	TV		(R)	THRESHOLD VALUE
C	XMAX		(R)	MAXIMUM X VALUE (USED FOR SCALING)
C
	LOGICAL IF1,IF2
C
	IF1=.FALSE.
	IF2=.FALSE.
	IF (IDIR.LT.0) THEN
		IF (V1.LT.TV) IF1=.TRUE.
		IF (V2.LT.TV) IF2=.TRUE.
	ELSE
		IF (V1.GT.TV) IF1=.TRUE.
		IF (V2.GT.TV) IF2=.TRUE.
	ENDIF
	IF (IF1.AND.IF2) THEN
		CALL RVXPT3D(PX,PY,TV,X1,Y1,XMAX)
		CALL PLOT(PX,PY,3)
		CALL RVXPT3D(PX,PY,TV,X2,Y2,XMAX)
		CALL PLOT(PX,PY,2)
		RETURN
	ENDIF
	IF (IF1.OR.IF2) THEN
		IF=ISEGCODE(X1,Y1,X2,Y2,V1,V2,TV,XI,YI)
		IF (IF.NE.0) THEN
			IF (IF1) THEN
				CALL RVXPT3D(PX,PY,TV,X1,Y1,XMAX)
				CALL PLOT(PX,PY,3)
				CALL RVXPT3D(PX,PY,TV,XI,YI,XMAX)
				CALL PLOT(PX,PY,2)
			ELSE
				CALL RVXPT3D(PX,PY,TV,X2,Y2,XMAX)
				CALL PLOT(PX,PY,3)
				CALL RVXPT3D(PX,PY,TV,XI,YI,XMAX)
				CALL PLOT(PX,PY,2)
			ENDIF
		ENDIF
	ENDIF
	RETURN
	END
C
C
	INTEGER FUNCTION ISEGCODE(X1,Y1,X2,Y2,V1,V2,TV,XI,YI)
C
C	CREATED BY D. LONG  JULY, 1985
C	SUBPROGRAM OF CNT3DX
C
C	ROUTINE TO COMPUTE WHERE A LINE IN 2-SPACE CROSSES
C	A THRESHOLD VALUE
C
C	X1,Y1,X2,Y2	(R)	START, END POINTS OF LINE
C	V1,V2		(R)	VALUE OF FUNCTION AT START, END POINTS OF LINE
C	TV		(R)	THRESHOLD VALUE
C	XI,YI		(R)	THRESHOLD POINT (RETURNED)
C
C	ISEGCODE RETURNS:
C				0 = NO INTERSECTION
C				1 = INTERSECTION
C
	ISEGCODE=0
	IF ((V1.LE.TV.AND.V2.GE.TV).OR.(V1.GE.TV.AND.V2.LE.TV)) THEN
		DV=V2-V1
		XD=(X2-X1)/DV
		IF (XD.EQ.0.0) THEN
			XD=(Y2-Y1)/DV
			IF (XD.EQ.0.0) RETURN
			YI=(TV-V1)*XD+Y1
			XI=X1
		ELSE
			XI=(TV-V1)*XD+X1
			YI=(Y2-Y1)*(XI-X1)/(X2-X1)+Y1
		ENDIF
		ISEGCODE=1
	ENDIF
	RETURN
	END
