C
C *** LAST REVISED ON  8-DEC-1993 07:27:09.08
C *** SOURCE FILE: [LONGLIB93.SOURCES.FORTRAN.MASTER]GCONTR.FOR
C
C
	SUBROUTINE GCONTR(Z,NDX,NDY,NX,NY,XL,YL,CV,NC,ZMAX,BITMAP,NCH,CS,
     $		NMIN,ICL,ICOL,ILINE)
C
C	DRAWS CONTOURS THROUGH EQUAL VALUES OF AN ORTHOGONAL ARRAY
C
C	Z	(R)	ARRAY FOR WHICH CONTOURS DRAWN
C			DIMENSIONED Z(NDX,NDY) (X,Y)
C	NDX,NDY	(I)	DIMENSION OF Z
C	NX,NY	(I)	NUMBER OF X,Y POINTS IN Z TO USE (NX<=NRZ)
C	XL,YL	(R)	SCALE FACTORS FOR X,Y POINTS (INCHES/POINT)
C	CV	(R)	ARRAY OF CONTOUR VALUES TO BE DRAWN DIM DV(NCV)
C			CV < 0 CAUSES PLT3D PLOTTING PARAMETERS TO BE USED
C			FOR OUTPUTTING CONTOUR VALUES
C	NC	(I)	NUMBER OF CONTOURS IN CV (SET TO NCV)
C			 IF NCV < 0 THEN ONLY ONE CONTOUR IS ASSUMED.  IT
C			 WILL BE LABELED AS CONTOUR IABS(NC) AND NCV WILL BE
C			 EQUAL TO 1 WHEREVER IT APPEARS.
C	ZMAX	(R)	MAXIMUM VALUE OF Z FOR CONSIDERATION.  A POINT
C			Z(I,J) WHIC EXCEEDS ZMAX WILL CAUSE THIS POINT AND
C			THE LINE SEGMENTS WHICH RADIATE OUT FROM IT TO NOT
C			BE CONSIDERED WHEN CONTOURING.
C	BITMAP	(I*4)	WORK SPACE DIMENSIONED AT LEAST
C			(2*NX*NY*NCV+NBPW-1)/NBPW WHERE NBPW IS THE
C			NUMBER OF USEFUL BITS IN A WORD (NBPW=31)
C	NCH	(I)	CONTOUR LABELING OPTION
C			< 0 LABEL WITH CONTOUR VALUE (NCH IS NUMBER
C				OF DIGITS TO THE LEFT OF DECIMAL)
C			= 0 NO LABELING OF CONTOURS
C			> 0 LABEL WITH LETTERS
C	CS	(R)	SIZE OF LABELS
C			> 0 NORMAL LINEAR OPERATION
C			< 0 PLT3D TRANSFORMATION USED (XL,YL SHOULD BE 1.0)
C	NMIN	(I)	MINIMUM NUMBER OF SEGMENTS CROSSED FOR CONTOUR
C			TO BE LABELED
C	ICL	(I)	COLOR AND LINE TYPE FLAG
C			= 0 NO COLOR OR LINE TYPE USED
C			= 1 COLOR USED ONLY
C			= 2 LINE TYPE USED ONLY
C			= 3 COLOR AND LINE TYPE USED
C	ICOL	(I)	LINE COLOR FOR EACH CONTOUR
C	ILINE	(I)	LINE TYPE FOR EACH CONTOUR
C
	REAL Z(NDX,NDY),CV(1)
	INTEGER ICOL(1),ILINE(1),jump
	INTEGER*4 BITMAP(1),IBIT(32)
	INTEGER L1(4),L2(4),IJ(2)	! LIMITS USED IN SPIRAL SEARCH
	INTEGER I1(2),I2(2),I3(6)	! NEIGHBOR COMPUTATIONS
	REAL XINT(4)			! INTERSECTIONS OF CONTOURS WITH CELL EDGES
	REAL XY(2)			! COORDINATES FOR PLOTTING
	EQUIVALENCE (L2(1),IMAX),(L2(2),JMAX),(L2(3),IMIN),(L2(4),JMIN)
	EQUIVALENCE (IJ(1),I),(IJ(2),J),(XY(1),X),(XY(2),Y)
C
	DATA L1(3)/-1/,L1(4)/-1/,I1/1,0/,I2/1,-1/,I3/1,0,0,1,1,0/
	DATA NBPW/31/
C
C	IGET RETURNS THE VALUE OF THE NTH BIT OF BITMAP
C
	IGET(N)=MOD(BITMAP((N-1)/NBPW+1)/2**(NBPW-MOD(N-1,NBPW)-1),2)
C
C	COMPUTE BITS ARRAY
C
	NCV=1
	IF (NC.GT.0) NCV=NC
	DO 2 I=1,NBPW
		IBIT(I)=2**(I-1)
2	CONTINUE
C
	L1(1)=NX
	L1(2)=NY
	DMAX=ZMAX
C
C	SET INITIAL POSITION
C
	jump1=0
	
	X=NX
	Y=NY
	ICUR=int(X)
	JCUR=int(Y)
C
C	CLEAR BITMAP
C	FILLS BITMAP WITH N ZEROS.  NBPW IS THE NUMBER OF USEFUL BITS IN
C	A WORD (USUALLY 1 LESS THAN THE NUMBER OF BITS)
C
	N=2*NX*NY*NCV
	LOOP=N/NBPW
	NBLW=MOD(N,NBPW)
	IF (LOOP.EQ.0) GOTO 5
	DO 1 I=1,LOOP
		BITMAP(I)=0
1	CONTINUE
5	IF(NBLW.NE.0) BITMAP(LOOP+1)=0
C
C	SEARCH ALONG RECTANGULAR SPIRAL PATH FOR A LINE SEGMENT THAT
C	1. END POINTS ARE NOT EXCLUDED
C	2. NO MARK HAS BEEN RECORDED FOR THE SEGMENT
C	3. VALUES OF Z AT END OF SEGMENT ARE SUTCH THAT ONE Z IS LESS THAN
C	   THE CURRENT CONTOUR VALUE, AND THE OTHER IS GREATER THAN OR EQUAL
C	   TO THE CURRENT CONTOUR VALUE
C
	IBKEY=0
10	I=ICUR
	J=JCUR
20	IMAX=I
	IMIN=-I
	JMAX=J
	JMIN=-J
	IDIR=0
C
C	DIRECTION CODE:
C	 0: +I   1:+J   2:-I   3:-J
C
30	NXIDIR=IDIR+1
	K=NXIDIR
	IF (NXIDIR.GT.3) NXIDIR=0
40	I=IABS(I)
	J=IABS(J)
	IF (Z(I,J).GT.DMAX) GOTO 140
	L=1
C L=1 MEANS HORIZONTAL LINE, L=2 MEANS VERTICAL LINE
50	IF (IJ(L).GE.L1(L)) GOTO 130
	II=I+I1(L)
	JJ=J+I1(3-L)
	IF (Z(II,JJ).GT.DMAX) GOTO 130
C
c	ASSIGN 100 TO JUMP
	jump=100
C       
C THE NEXT 15 STATEMENTS DETECT BOUNDRIES
C
60	IX=1
	IF (IJ(3-L).EQ.1) GOTO 80
	II=I-I1(3-L)
	JJ=J-I1(L)
	IF (Z(II,JJ).GT.DMAX) GOTO 70
	II=I+I2(L)
	JJ=J+I2(3-L)
	IF (Z(II,JJ).LT.DMAX) IX=0
70	IF (IJ(3-L).GE.L1(3-L)) GOTO 90
80	II=I+I1(3-L)
	JJ=J+I1(L)
	IF (Z(II,JJ).GT.DMAX) GOTO 90
	!IF (Z(I+1,J+1).LT.DMAX) GOTO JUMP ! (100 OR 280)
	IF (Z(I+1,J+1).LT.DMAX) then
	   if (jump.eq.100) then
	      goto 100
	   else
	      goto 280
	   endif
	endif
90	IX=IX+2
	!GOTO JUMP 				! (100 OR 280)
	if (jump.eq.100) then
	   goto 100
	else
	   goto 280
	endif
100	IF (IX.EQ.3) GOTO 130
	IF (IX+IBKEY.EQ.0) GOTO 130
C DETERMINE WHETHER LINE SEGMENT IS CROSSED BY CONTOUR
	II=I+I1(L)
	JJ=J+I1(3-L)
	Z1=Z(I,J)
	Z2=Z(II,JJ)
	DO 120 ICV=1,NCV
CC		IF (IGET(BITMAP,2*(NX*(NY*(ICV-1)+J-1)+I-1)+L).NE.0) GOTO 120
		IF (IGET(2*(NX*(NY*(ICV-1)+J-1)+I-1)+L).NE.0) GOTO 120
		IF (CV(ICV).LE.MIN(Z1,Z2)) GOTO 110
		IF (CV(ICV).LE.MAX(Z1,Z2)) GOTO 190
110		CONTINUE
C
C	MARK BIT MAP
C
CC		CALL MARK1(BITMAP,2*(NX*(NY*(ICV-1)+J-1)+I-1)+L,NBPW)
		LL=2*(NX*(NY*(ICV-1)+J-1)+I-1)+L
		NWORD=(LL-1)/NBPW+1
		NBIT=MOD(LL-1,NBPW)
		IIJ=IBIT(NBPW-NBIT)
		BITMAP(NWORD)=BITMAP(NWORD)+IIJ*(1-MOD(BITMAP(NWORD)/IIJ,2))
120	CONTINUE
130	L=L+1
	IF (L.LE.2) GOTO 50
140	L=MOD(IDIR,2)+1
	IJ(L)=ISIGN(IJ(L),L1(K))
C
C	LINES FROM Z(I,J) TO Z(I+1,J) AND Z(I,J+1) ARE NOT SATISFACTORY,
C	SO CONTINUE SPIRAL
C
150	IF (IJ(L).GE.L1(K)) GOTO 170
	IJ(L)=IJ(L)+1
	IF (IJ(L).GT.L2(K)) GOTO 160
	GOTO 40
160	L2(K)=IJ(L)
	IDIR=NXIDIR
	GOTO 30
170	IF (IDIR.EQ.NXIDIR) GOTO 180
	NXIDIR=NXIDIR+1
	IJ(L)=L1(K)
	K=NXIDIR
	L=3-L
	IJ(L)=L2(K)
	IF (NXIDIR.GT.3) NXIDIR=0
	GOTO 150
180	IF (IBKEY.NE.0) RETURN
	IBKEY=1
	GOTO 10
C
C AN ACCEPTABLE LINE SEGMENT HAS BEEN FOUND.  FOLLOW CONTOUR UNTIL IT 
C HITS THE BOUNDRY OR CLOSES
C
190	IEDGE=L
	CVAL=CV(ICV)
	IF (IX.NE.1) IEDGE=IEDGE+2
	IFLAG=2+IBKEY
	XINT(IEDGE)=(CVAL-Z1)/(Z2-Z1)
200	XY(L)=FLOAT(IJ(L))+XINT(IEDGE)
	XY(3-L)=FLOAT(IJ(3-L))
C
C	MARK BIT MAP
C
CC	CALL MARK1(BITMAP,2*(NX*(NY*(ICV-1)+J-1)+I-1)+L,NBPW)
	LL=2*(NX*(NY*(ICV-1)+J-1)+I-1)+L
	NWORD=(LL-1)/NBPW+1
	NBIT=MOD(LL-1,NBPW)
	IIJ=IBIT(NBPW-NBIT)
	BITMAP(NWORD)=BITMAP(NWORD)+IIJ*(1-MOD(BITMAP(NWORD)/IIJ,2))
C
	XX=(X-1.)*XL
	YY=(Y-1.)*YL
	CALL CNDRAW(XX,YY,IFLAG,NC,CVAL,NCH,CS,NMIN,ICL,ICOL,ILINE)
	IF (IFLAG.LT.4) GOTO 210
	ICUR=I
	JCUR=J
	GOTO 20
C
C CONTINUE CONTOUR.  EDGES ARE NUMBERED CLOCKWISE WITH BOTTOM EDGE BEING
C EDGE NUMBER ONE.
C
210	NI=1
	IF (IEDGE.LT.3) GOTO 220
	I=I-I3(IEDGE)
	J=J-I3(IEDGE+2)
220	DO 250 K=1,4
		IF (K.EQ.IEDGE) GOTO 250
		II=I+I3(K)
		JJ=J+I3(K+1)
		Z1=Z(II,JJ)
		II=I+I3(K+1)
		JJ=J+I3(K+2)
		Z2=Z(II,JJ)
		IF (CVAL.LE.AMIN1(Z1,Z2)) GOTO 250
		IF (CVAL.GT.AMAX1(Z1,Z2)) GOTO 250
		IF (K.EQ.1) GOTO 230
		IF (K.NE.4) GOTO 240
230		ZZ=Z1
		Z1=Z2
		Z2=ZZ
240		XINT(K)=(CVAL-Z1)/(Z2-Z1)
		NI=NI+1
		KS=K
250	CONTINUE
	IF (NI.EQ.2) GOTO 260
C
C CONTOUR CROSSES ALL FOUR EDGES OF THE CELL.  CHOOSE LINES TOP-TO-LEFT
C AND BOTTOM TO RIGHT IF THE INTERPOLATION POINT ON THE TOP EDGE IS LESS THAN
C THE INTERPOLATION POINT ON THE BOTTOM EDGE.  OTHERWISE CHOSE THE OTHER
C PAIR.  METHOD PRODUCES SAME RESULTS FOR REVERSED AXES.  CONTOUR MAY CLOSE
C AT ANY EDGE, BUT MUST NOT CROSS ITSELF IN ANY CELL.
C
	KS=5-IEDGE
	IF (XINT(3).LT.XINT(1)) GOTO 260
	KS=3-IEDGE
	IF (KS.LE.0) KS=KS+4
C
260	L=KS
	IFLAG=1
	!ASSIGN 280 TO JUMP
	jump=280
	IF (KS.LT.3) GOTO 270
	I=I+I3(KS)
	J=J+I3(KS+2)
	L=KS-2
270	IF (IGET(2*(NX*(NY*(ICV-1)+J-1)+I-1)+L).EQ.0) GOTO 60
	IFLAG=5
	GOTO 290
280	IF (IX.NE.0) IFLAG=4
290	IEDGE=KS+2
	IF (IEDGE.GT.4) IEDGE=IEDGE-4
	XINT(IEDGE)=XINT(KS)
	GOTO 200
	END



